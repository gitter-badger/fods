package org.jsoftware.fods.impl.stats;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.NClob;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Savepoint;
import java.sql.Statement;
import java.sql.Struct;
import java.util.Map;
import java.util.Properties;

import org.jsoftware.fods.client.ext.Logger;

/**
 * {@link Connection} wrapper collecting fods's {@link Statistics} informations.
 * @author szalik
 */
public class StatsConnectionWrapper implements Connection {
	private static final String NOT_SUPPORTED = "Not supported by fods.";
	private Connection connection;
	private StatisticsItem statItem;
	private int logSQL;
	private Logger logger;
	private String dbName;

	public StatsConnectionWrapper(StatisticsItem statisticsItem, Connection conn, int logLongSQLs, Logger logger, String dbName) {
		this.statItem = statisticsItem;
		this.connection = conn;
		this.statItem.get++;
		this.logSQL = logLongSQLs;
		this.logger = logger;
		this.dbName = dbName;
	}

	public void clearWarnings() throws SQLException {
		connection.clearWarnings();
	}

	public void close() throws SQLException {
		statItem.release++;
		connection.close();
	}

	public void commit() throws SQLException {
		connection.commit();
	}

	public Statement createStatement() throws SQLException {
		return createStatementProxy(connection.createStatement(), Statement.class, null);
	}

	public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
		return createStatementProxy(connection.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability), Statement.class, null);
	}

	public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
		return createStatementProxy(connection.createStatement(resultSetType, resultSetConcurrency), Statement.class, null);
	}

	public boolean getAutoCommit() throws SQLException {
		return connection.getAutoCommit();
	}

	public String getCatalog() throws SQLException {
		return connection.getCatalog();
	}

	public int getHoldability() throws SQLException {
		return connection.getHoldability();
	}

	public DatabaseMetaData getMetaData() throws SQLException {
		return connection.getMetaData();
	}

	public int getTransactionIsolation() throws SQLException {
		return connection.getTransactionIsolation();
	}

	public Map<String, Class<?>> getTypeMap() throws SQLException {
		return connection.getTypeMap();
	}

	public SQLWarning getWarnings() throws SQLException {
		return connection.getWarnings();
	}

	public boolean isClosed() throws SQLException {
		return connection.isClosed();
	}

	public boolean isReadOnly() throws SQLException {
		return connection.isReadOnly();
	}

	public String nativeSQL(String sql) throws SQLException {
		long ts1 = System.currentTimeMillis();
		try {
			return connection.nativeSQL(sql);
		} finally {
			logSQL(sql, (int) (System.currentTimeMillis() - ts1), false, 1);
		}
	}

	public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
		return createStatementProxy(connection.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability), CallableStatement.class, sql);
	}

	public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
		return createStatementProxy(connection.prepareCall(sql, resultSetType, resultSetConcurrency), CallableStatement.class, sql);
	}

	public CallableStatement prepareCall(String sql) throws SQLException {
		return createStatementProxy(connection.prepareCall(sql), CallableStatement.class, sql);
	}

	public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
		return createStatementProxy(connection.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability), PreparedStatement.class, sql);
	}

	public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
		return createStatementProxy(connection.prepareStatement(sql, resultSetConcurrency, resultSetConcurrency), PreparedStatement.class, sql);
	}

	public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
		return createStatementProxy(connection.prepareStatement(sql, autoGeneratedKeys), PreparedStatement.class, sql);
	}

	public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
		return createStatementProxy(connection.prepareStatement(sql, columnIndexes), PreparedStatement.class, sql);
	}

	public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
		return createStatementProxy(connection.prepareStatement(sql, columnNames), PreparedStatement.class, sql);
	}

	public PreparedStatement prepareStatement(String sql) throws SQLException {
		return createStatementProxy(connection.prepareStatement(sql), PreparedStatement.class, sql);
	}

	public void releaseSavepoint(Savepoint savepoint) throws SQLException {
		connection.releaseSavepoint(savepoint);
	}

	public void rollback() throws SQLException {
		connection.rollback();
	}

	public void rollback(Savepoint savepoint) throws SQLException {
		connection.rollback(savepoint);
	}

	public void setAutoCommit(boolean autoCommit) throws SQLException {
		connection.setAutoCommit(autoCommit);
	}

	public void setCatalog(String catalog) throws SQLException {
		connection.setCatalog(catalog);
	}

	public void setHoldability(int holdability) throws SQLException {
		connection.setHoldability(holdability);
	}

	public void setReadOnly(boolean readOnly) throws SQLException {
		connection.setReadOnly(readOnly);
	}

	public Savepoint setSavepoint() throws SQLException {
		return connection.setSavepoint();
	}

	public Savepoint setSavepoint(String name) throws SQLException {
		return connection.setSavepoint(name);
	}

	public void setTransactionIsolation(int level) throws SQLException {
		connection.setTransactionIsolation(level);
	}

	public void setTypeMap(Map<String, Class<?>> map) throws SQLException {
		connection.setTypeMap(map);
	}

	// ------------------ Methods for JDK6 ------------------------------------
	public Array createArrayOf(String typeName, Object[] elements) throws SQLException {
		throw new RuntimeException(NOT_SUPPORTED);
	}

	public Blob createBlob() throws SQLException {
		throw new RuntimeException(NOT_SUPPORTED);
	}

	public Clob createClob() throws SQLException {
		throw new RuntimeException(NOT_SUPPORTED);
	}

	public NClob createNClob() throws SQLException {
		throw new RuntimeException(NOT_SUPPORTED);
	}

	public SQLXML createSQLXML() throws SQLException {
		throw new RuntimeException(NOT_SUPPORTED);
	}

	public Struct createStruct(String typeName, Object[] attributes) throws SQLException {
		throw new RuntimeException(NOT_SUPPORTED);
	}

	public Properties getClientInfo() throws SQLException {
		throw new RuntimeException(NOT_SUPPORTED);
	}

	public String getClientInfo(String name) throws SQLException {
		throw new RuntimeException(NOT_SUPPORTED);
	}

	public boolean isValid(int timeout) throws SQLException {
		throw new RuntimeException(NOT_SUPPORTED);
	}

	public void setClientInfo(Properties properties) {
		throw new RuntimeException(NOT_SUPPORTED);
	}

	public void setClientInfo(String name, String value) {
		throw new RuntimeException(NOT_SUPPORTED);
	}

	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		throw new RuntimeException(NOT_SUPPORTED);
	}

	public <T> T unwrap(Class<T> iface) throws SQLException {
		throw new RuntimeException(NOT_SUPPORTED);
	}

	@SuppressWarnings("unchecked")
	private <T> T createStatementProxy(final T target, Class<T> interfClass, final String sqlConstr) {
		InvocationHandler h = new InvocationHandler() {
			private int batches;

			public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
				String methodName = method.getName();
				String sql = sqlConstr;
				long ts1 = System.currentTimeMillis();
				int q = 0;
				try {
					if (methodName.equals("executeQuery") || methodName.equals("execute")) {
						q = 1;
					}
					if (methodName.equals("executeBatch")) {
						q = batches;
						sql = "[batch " + batches + "]";
						batches = 0;
					}
					if (methodName.equals("addBatch")) {
						batches++;
					}
					if (methodName.equals("clearBatch")) {
						batches = 0;
					}
					if (methodName.equals("getConnection")) {
						return StatsConnectionWrapper.this;
					}
					return method.invoke(target, args);
				} finally {
					if (q > 0) {
						int tms = (int) (System.currentTimeMillis() - ts1);
						if (args != null && args.length > 0 && args[0] instanceof CharSequence) {
							sql = args[0].toString();
						}
						logSQL(sql, tms, methodName.endsWith("Query"), q);
					}
				}
			}
		};

		return (T) Proxy.newProxyInstance(getClass().getClassLoader(), new Class[] { interfClass }, h);
	}

	private void logSQL(String sql, int timems, boolean selectQuery, int statements) {
		if (selectQuery) {
			statItem.executedSelectQueries += statements;
			statItem.executedSelectTime += timems;
		} else {
			statItem.executedQueries += statements;
			statItem.executedTime += timems;
		}
		if (logSQL >= 0 && timems >= logSQL) {
			logger.info("Long sql query: " + (sql == null ? "-" : "\"" + sql + "\"") + " on " + dbName + " in " + timems + "ms.");
		}
	}

}
